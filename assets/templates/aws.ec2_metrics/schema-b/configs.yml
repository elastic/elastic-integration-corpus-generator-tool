fields:
  - name: dimensionType
    # no dimension: 2.5%, AutoScalingGroupName: 10%, ImageId: 5%, InstanceType: 2.5%, InstanceId: 80%
    enum: ["", "AutoScalingGroupName", "AutoScalingGroupName", "AutoScalingGroupName", "AutoScalingGroupName", "ImageId", "ImageId", "InstanceType", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId", "InstanceId"]
    cardinality:
      numerator: 1
      # we want every single different "dimension identifier", regardless of its type, to have always the same generated fixed "metadata" once the cardinality kicks in
      # for this we must take the ordered highest enum length appending one by one the ones that does not have a 0 module between each others.
      # we start from the first two, multiple between their values and exclude from the order list the ones that have a 0 module on the result of the multiplication.
      # we end up with the list of enum lengths whose value, multiplied, define the least common multiple: this is the value we must use for the denominator of all fields.
      # in this case the remaining enum are two: `dimensionType` (40) and `region` (15), resulting in denominator `600`
      denominator: 600
  - name: Region
    enum: ["ap-south-1", "eu-north-1", "eu-west-3", "eu-west-2", "eu-west-1", "ap-northeast-3", "ap-northeast-2", "ap-northeast-1", "ap-southeast-1", "ap-southeast-2", "eu-central-1", "us-east-1", "us-east-2", "us-west-1", "us-west-2"]
    cardinality:
      numerator: 1
      denominator: 600
  - name: AutoScalingGroupName
    cardinality:
      numerator: 1
      denominator: 600
  - name: ImageId
    cardinality:
      numerator: 1
      denominator: 600
  - name: InstanceId
    cardinality:
      numerator: 1
      denominator: 600
  - name: instanceTypeIdx
    # we generate and index for the instance type enums, so that all the information related to a given type are properly matched
    range:
      min: 0
      max: 19
    cardinality:
      numerator: 1
      denominator: 600
  - name: InstanceType
    value: ["a1.medium", "c3.2xlarge", "c4.4xlarge", "c5.9xlarge", "c5a.12xlarge", "c5ad.16xlarge", "c5d.24xlarge", "c6a.32xlarge", "g5.48xlarge", "d2.2xlarge", "d3.xlarge", "t2.medium", "t2.micro", "t2.nano", "t2.small", "t3.large", "t3.medium", "t3.micro", "t3.nano", "t3.small"]
  - name: instanceCoreCount
    # they map instance types
    value: ["1", "4", "8", "18", "24", "32", "48", "64", "96", "4", "2", "2", "1", "1", "1", "1", "1", "1", "1", "1"]
  - name: instanceThreadPerCore
    # they map instance types
    value: ["1", "2", "2", " 2", " 2", " 2", " 2", " 2", " 2", "2", "2", "1", "1", "1", "1", "2", "2", "2", "2", "2"]
  - name: instanceImageId
    cardinality:
      numerator: 1
      denominator: 600
  - name: instanceMonitoringState
    # enable: 10%, disabled: 90%
    enum: ["enabled", "disabled", "disabled", "disabled", "disabled", "disabled", "disabled", "disabled", "disabled", "disabled"]
    cardinality:
      numerator: 1
      denominator: 600
  - name: instancePrivateIP
    cardinality:
      numerator: 1
      denominator: 600
  - name: instancePrivateDnsEmpty
    # without private dns entry: 10%, with private dns entry: 90%
    enum: ["empty", "fromPrivateIP", "fromPrivateIP", "fromPrivateIP", "fromPrivateIP", "fromPrivateIP", "fromPrivateIP", "fromPrivateIP", "fromPrivateIP", "fromPrivateIP"]
    cardinality:
      numerator: 1
      denominator: 600
  - name: instancePublicIP
    cardinality:
      numerator: 1
      denominator: 600
  - name: instancePublicDnsEmpty
    # without public dns entry: 20%, with public dns entry: 80%
    enum: ["empty", "fromPublicIP", "fromPublicIP", "fromPublicIP", "fromPublicIP"]
    cardinality:
      numerator: 1
      denominator: 600
  - name: instanceStateName
    # terminated: 10%, running: 90%
    enum: ["terminated", "running", "running", "running", "running", "running", "running", "running", "running", "running"]
    cardinality:
      numerator: 1
      denominator: 600
  - name: cloudInstanceName
    cardinality:
      numerator: 1
      denominator: 600
  - name: StatusCheckFailed_InstanceAvg
    range:
      min: 0
      max: 10
    fuzziness: 0.05
  - name: StatusCheckFailed_SystemAvg
    range:
      min: 0
      max: 10
    fuzziness: 0.05
  - name: StatusCheckFailedAvg
    range:
      min: 0
      max: 10
    fuzziness: 0.05
  - name: CPUUtilizationAvg
    range:
      min: 0
      max: 100
    fuzziness: 0.05
  - name: NetworkPacketsInSum
    range:
      min: 0
      max: 1500000
    fuzziness: 0.05
  - name: NetworkPacketsOutSum
    range:
      min: 0
      max: 1500000
    fuzziness: 0.05
  - name: CPUCreditBalanceAvg
    range:
      min: 0
      max: 5000
    fuzziness: 0.05
  - name: CPUSurplusCreditBalanceAvg
    range:
      min: 0
      max: 5000
    fuzziness: 0.05
  - name: CPUSurplusCreditsChargedAvg
    range:
      min: 0
      max: 5000
    fuzziness: 0.05
  - name: CPUCreditUsageAvg
    range:
      min: 0
      max: 10
    fuzziness: 0.05
  - name: DiskReadBytesSum
    range:
      min: 0
      max: 1500000
    fuzziness: 0.05
  - name: DiskReadOpsSum
    range:
      min: 0
      max: 1000
    fuzziness: 0.05
  - name: DiskWriteBytesSum
    range:
      min: 0
      max: 1500000000
    fuzziness: 0.05
  - name: DiskWriteOpsSum
    range:
      min: 0
      max: 1000
    fuzziness: 0.05
  - name: EventDuration
    range:
      min: 1
      max: 1000
  - name: partOfAutoScalingGroup
    # we dived this value by 20 in the template, giving 20% chance to be part of an autoscaling group: in this case we append the related aws.tags
    range:
      min: 1
      max: 100
